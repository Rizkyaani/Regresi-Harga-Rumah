# -*- coding: utf-8 -*-
"""Regresi harga rumah.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l-GyAWssEHhl3UzPo5vJTU-PN1iIsLqc
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score,mean_squared_error,mean_absolute_error
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor

import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/kc_house_data.csv')
df.head()

"""# DATA CLEANSING"""

df.info()

df.describe()

df.isnull().sum()

"""Tidak ada data yang hilang"""

df.drop(['id', 'date'], axis = 1, inplace=True)

#drop kolom id dan date

df.head()
#cek data yang baru setelah di drop

#ubah kolom menjadi bilangan bulat
df['bathrooms'] = np.round(df['bathrooms'])
df['floors'] = np.round(df['floors'])

"""# EDA"""

plt.figure(figsize=(10, 5))
sns.displot(x='price', data=df, bins=100, kde=True, height=10, aspect=1.5, color='teal')
plt.ticklabel_format(style='plain', axis='x')
plt.title("Distribution of Price", fontsize=20)

"""Distribusi harga rumah miring ke kanan, yang menunjukkan bahwa ada lebih banyak rumah dengan harga lebih rendah dan lebih sedikit rumah dengan harga sangat tinggi"""

fig, ax = plt.subplots(nrows=2, ncols=1, figsize=(12, 10))

sns.countplot(ax=ax[0], x='bedrooms', data=df, color='teal')
ax[0].set_xlabel('Bedrooms', fontsize=15)
ax[0].set_ylabel('Count', fontsize=15)
ax[0].set_title("Bedroom's Count", fontsize=15)

sns.boxplot(ax=ax[1], x='bedrooms', y='price', data=df, color='teal')
ax[1].ticklabel_format(style='plain', axis='y')
ax[1].set_xlabel('Bedrooms', fontsize=15)
ax[1].set_ylabel('Price', fontsize=15)
ax[1].set_title("Bedroom vs Price", fontsize=15)

plt.subplots_adjust(wspace=0.4, hspace=0.4)

"""Dataset memiliki lebih banyak contoh rumah dengan 3 kamar tidur.
Rumah yang semakin banyak memiliki kamar tidur, harga rumah cenderung meningkat

"""

fig, ax = plt.subplots(nrows=2, ncols=1, figsize=(12, 10))

sns.countplot(ax=ax[0], x='bathrooms', data=df, color='teal')
ax[0].set_xlabel('bathrooms', fontsize=15)
ax[0].set_ylabel('Count', fontsize=15)
ax[0].set_title("bathroom's Count", fontsize=15)

sns.boxplot(ax=ax[1], x='bathrooms', y='price', data=df, color='teal')
ax[1].ticklabel_format(style='plain', axis='y')
ax[1].set_xlabel('bathrooms', fontsize=15)
ax[1].set_ylabel('Price', fontsize=15)
ax[1].set_title("bathrooms vs Price", fontsize=15)

plt.subplots_adjust(wspace=0.4, hspace=0.4)

"""Dataset memiliki lebih banyak contoh rumah yang memiliki 2,5 kamar mandi.

Rumah yang semakin banyak memiliki kamar mandi maka semakin tinggi juga harga rumah tersebut
"""

fig, ax = plt.subplots(nrows=2, ncols=1, figsize=(12, 10))

sns.countplot(ax=ax[0], x='waterfront', data=df, color='teal')
ax[0].set_xlabel('Waterfront', fontsize=15)
ax[0].set_ylabel('Count', fontsize=15)
ax[0].set_title("waterfront's Count", fontsize=15)

sns.boxplot(ax=ax[1], x='waterfront', y='price', data=df, color='teal')
ax[1].ticklabel_format(style='plain', axis='y')
ax[1].set_xlabel('Waterfront', fontsize=15)
ax[1].set_ylabel('Price', fontsize=15)
ax[1].set_title("Waterfront vs Price", fontsize=15)

plt.subplots_adjust(wspace=0.4, hspace=0.4)

df.waterfront.value_counts()

"""Dataset memiliki lebih banyak contoh rumah yang tidak memiliki water front.
rumah yang memiliki water front maka semakin tinggi juga harga rumah tersebut
"""

fig, ax = plt.subplots(nrows=2, ncols=1, figsize=(12, 10))

sns.countplot(ax=ax[0], x='view', data=df, color='teal')
ax[0].set_xlabel('View', fontsize=15)
ax[0].set_ylabel('Count', fontsize=15)
ax[0].set_title("view's Count", fontsize=15)

sns.boxplot(ax=ax[1], x='view', y='price', data=df, color='teal')
ax[1].ticklabel_format(style='plain', axis='y')
ax[1].set_xlabel('View', fontsize=15)
ax[1].set_ylabel('Price', fontsize=15)
ax[1].set_title("View vs Price", fontsize=15)

plt.subplots_adjust(wspace=0.4, hspace=0.4)

"""Dataset memiliki lebih banyak contoh rumah tanpa pemandangan.
Rumah yang memiliki pemandangan cenderung memiliki harga yang lebih tinggi
"""

fig, ax = plt.subplots(nrows=2, ncols=1, figsize=(12, 10))

sns.countplot(ax=ax[0], x='condition', data=df, color='teal')
ax[0].set_xlabel('condition', fontsize=15)
ax[0].set_ylabel('Count', fontsize=15)
ax[0].set_title("condition's Count", fontsize=15)

sns.boxplot(ax=ax[1], x='condition', y='price', data=df, color='teal')
ax[1].ticklabel_format(style='plain', axis='y')
ax[1].set_xlabel('condition', fontsize=15)
ax[1].set_ylabel('Price', fontsize=15)
ax[1].set_title("condition vs Price", fontsize=15)

plt.subplots_adjust(wspace=0.4, hspace=0.4)

"""Dataset memiliki sebagian besar contoh rumah dengan kondisi nomor 3.
Kondisi rumah nomor 5 memiliki harga rata-rata yang lebih tinggi
"""

fig, ax = plt.subplots(nrows=2, ncols=1, figsize=(12, 10))

sns.countplot(ax=ax[0], x='grade', data=df, color='teal')
ax[0].set_xlabel('Grade', fontsize=15)
ax[0].set_ylabel('Count', fontsize=15)
ax[0].set_title("Grade's Count", fontsize=15)

sns.boxplot(ax=ax[1], x='grade', y='price', data=df, color='teal')
ax[1].ticklabel_format(style='plain', axis='y')
ax[1].set_xlabel('Grade', fontsize=15)
ax[1].set_ylabel('Price', fontsize=15)
ax[1].set_title("Grade vs Price", fontsize=15)

plt.subplots_adjust(wspace=0.4, hspace=0.4)

"""Dalam dataset, sebagian besar rumah memiliki peringkat 7.
Harga rumah cenderung meningkat ketika peringkat juga meningkat
"""

#korelasi fitur terhadap variabel target harga
corr_matrix = df.corr()
corr_matrix['price'].sort_values(ascending=False)

matrix = np.triu(df.corr())
plt.figure(figsize=(15, 12))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm', mask=matrix)

"""CREATING MODELS"""

X = df[['bedrooms','bathrooms','sqft_living','sqft_lot','floors','waterfront','view','condition',
       'grade','sqft_above','sqft_basement','sqft_living15','sqft_lot15']].values
y = df['price'].values

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=50)

std = StandardScaler()
X_train = std.fit_transform(X_train)
X_test = std.transform(X_test)

rfr = RandomForestRegressor(n_estimators=200)
rfr.fit(X_train,y_train)

score_rfr = rfr.score(X_train,y_train)
prev_rfr = rfr.predict(X_test)
mae_rfr = mean_absolute_error(y_test,prev_rfr)
mse_rfr = mean_squared_error(y_test,prev_rfr)
rmse_rfr = np.sqrt(mse_rfr)

print('Score: ',score_rfr)
print('Mae: ',mae_rfr)
print('Mse: ',mse_rfr)
print('Rmse: ',rmse_rfr)

preco_rfr = df['price']
predict_rfr = pd.Series(prev_rfr)
error_rfr = preco_rfr-predict_rfr
data_rfr = {'Price':preco_rfr,'Predictions':predict_rfr,'Error':error_rfr}
data_prev_rfr = pd.DataFrame(data_rfr)
data_prev_rfr.head()

plt.figure(figsize=(10,6))
plt.scatter(y_test,prev_rfr)
plt.plot(y_test,y_test,color='teal')
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.title('Random Forest Regression')
plt.show()

"""Sebagian besar titik dekat dengan garis yang menunjukkan bahwa model random forest sebagai model yang baik dalam memprediksi harga"""